
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import load_iris, load_digits
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, roc_curve, auc, ConfusionMatrixDisplay
from sklearn.preprocessing import label_binarize
import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.datasets import mnist
from sklearn.metrics import RocCurveDisplay

# --- Задание 1: Обработка набора данных Iris ---
def iris_data_processing():
    # 1) Загрузка датасета Iris
    iris = load_iris()
    df = pd.DataFrame(data=iris.data, columns=iris.feature_names)
    df['species'] = pd.Categorical.from_codes(iris.target, iris.target_names)

    # 2.1) Загрузка данных и представление первых 5 строк
    print("Первые 5 строк датасета Iris:")
    print(df.head())

    # 2.2) Подсчёт количества каждого класса (species)
    print("\nКоличество экземпляров каждого класса:")
    print(df['species'].value_counts())

    # 2.3) Нормализация числовых признаков (sepal/petal length/width)
    features_to_normalize = iris.feature_names
    scaler = MinMaxScaler()
    df[features_to_normalize] = scaler.fit_transform(df[features_to_normalize])
    print("\nНормализованные числовые признаки:")
    print(df.head())

    # 2.3) Разбиение на обучающую и тестовую выборки (70/30)
    X = df[features_to_normalize]
    y = iris.target
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

    print("\nРазмер обучающей выборки:", X_train.shape)
    print("Размер тестовой выборки:", X_test.shape)

    return X_train, X_test, y_train, y_test

# --- Задание 2: Архитектура многослойного персептрона (MLP) ---
def mlp_digits_classification():
    # 1) Реализация и обучение простой нейросети (MLPClassifier) для классификации цифр
    digits = load_digits()
    X = digits.data
    y = digits.target

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

    # Создание и обучение модели MLPClassifier
    mlp = MLPClassifier(hidden_layer_sizes=(100,), max_iter=300, activation='relu', solver='adam', random_state=42)
    mlp.fit(X_train, y_train)

    # 2.1) Архитектура модели (количество слоёв, нейронов)
    print("\nАрхитектура модели MLPClassifier:")
    print("Количество слоёв:", len(mlp.coefs_) + 1)  # +1 для входного слоя
    print("Количество нейронов в каждом слое:", [X.shape[1]] + [layer.shape[1] for layer in mlp.coefs_]) # Входной слой + скрытые + выходной

    # 2.2) Точность на тестовой выборке
    y_pred = mlp.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    print("\nТочность на тестовой выборке:", accuracy)

    # 2.3) Визуализация нескольких предсказаний
    plt.figure(figsize=(12, 4))
    for i in range(5):
        plt.subplot(1, 5, i + 1)
        plt.imshow(X_test[i].reshape(8, 8), cmap='gray')
        plt.title(f"Предсказание: {y_pred[i]}\nИстинное значение: {y_test[i]}")
        plt.axis('off')
    plt.suptitle("Визуализация предсказаний MLPClassifier")
    plt.show()

# --- Задание 3: Построение и анализ сверточной нейросети на MNIST ---
def cnn_mnist():
    # 1) Загрузка и предобработка данных
    (x_train, y_train), (x_test, y_test) = mnist.load_data()

    # Масштабирование (значения пикселей от 0 до 1)
    x_train = x_train.astype('float32') / 255.0
    x_test = x_test.astype('float32') / 255.0

    # Reshape (добавление канала для сверточной сети)
    x_train = x_train.reshape(x_train.shape[0], 28, 28, 1)
    x_test = x_test.reshape(x_test.shape[0], 28, 28, 1)

    # 2) Реализация архитектуры CNN
    model = models.Sequential([
        layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),
        layers.MaxPooling2D((2, 2)),
        layers.Conv2D(64, (3, 3), activation='relu'),
        layers.MaxPooling2D((2, 2)),
        layers.Flatten(),
        layers.Dense(100, activation='relu'),
        layers.Dense(10, activation='softmax')  # 10 классов (цифры от 0 до 9)
    ])

    # Компиляция модели
    model.compile(optimizer='adam',
                  loss='sparse_categorical_crossentropy',  # Подходит для целочисленных меток
                  metrics=['accuracy'])

    # 3) Обучение модели на тренировочной выборке с валидацией
    history = model.fit(x_train, y_train, epochs=10, validation_data=(x_test, y_test))

    # 4) Построение графиков и матрицы ошибок
    # 4.1) График изменения точности и функции потерь по эпохам
    plt.figure(figsize=(12, 4))
    plt.subplot(1, 2, 1)
    plt.plot(history.history['accuracy'], label='Точность на обучающей выборке')
    plt.plot(history.history['val_accuracy'], label='Точность на валидационной выборке')
    plt.xlabel('Эпоха')
    plt.ylabel('Точность')
    plt.legend()

    plt.subplot(1, 2, 2)
    plt.plot(history.history['loss'], label='Функция потерь на обучающей выборке')
    plt.plot(history.history['val_loss'], label='Функция потерь на валидационной выборке')
    plt.xlabel('Эпоха')
    plt.ylabel('Функция потерь')
    plt.legend()
    plt.suptitle("Графики обучения CNN")
    plt.show()

    # 4.2) Матрица ошибок (confusion matrix)
    y_pred = np.argmax(model.predict(x_test), axis=1) # Преобразуем one-hot encoding обратно в метки классов
    cm = confusion_matrix(y_test, y_pred)
    disp = ConfusionMatrixDisplay(confusion_matrix=cm)
    disp.plot()
    plt.title("Матрица ошибок CNN")
    plt.show()

    # 4.3) ROC-кривые (One-vs-Rest) и AUC для каждого класса
    y_test_binarized = label_binarize(y_test, classes=np.unique(y_test))
    y_pred_probabilities = model.predict(x_test) # вероятности для каждого класса

    n_classes = y_test_binarized.shape[1] # Количество классов
    fpr = dict()
    tpr = dict()
    roc_auc = dict()

    for i in range(n_classes):
        fpr[i], tpr[i], _ = roc_curve(y_test_binarized[:, i], y_pred_probabilities[:, i])
        roc_auc[i] = auc(fpr[i], tpr[i])

    plt.figure(figsize=(8, 6))
    colors = ['blue', 'red', 'green', 'purple', 'orange', 'brown', 'pink', 'gray', 'olive', 'cyan']
    for i, color in zip(range(n_classes), colors):
        plt.plot(fpr[i], tpr[i], color=color, lw=2,
                 label='ROC curve of class {0} (area = {1:0.2f})'.format(i, roc_auc[i]))

    plt.plot([0, 1], [0, 1], 'k--', lw=2)
    plt.xlim([0.0, 1.0])
    plt.ylim([0.0, 1.05])
    plt.xlabel('False Positive Rate')
    plt.ylabel('True Positive Rate')
    plt.title('ROC curves for each class')
    plt.legend(loc="lower right")
    plt.show()

    # 5) Визуализация нескольких тестовых изображений с предсказанными метками модели
    plt.figure(figsize=(12, 4))
    for i in range(5):
        plt.subplot(1, 5, i + 1)
        plt.imshow(x_test[i].reshape(28, 28), cmap='gray')
        plt.title(f"Предсказание: {y_pred[i]}\nИстинное значение: {y_test[i]}")
        plt.axis('off')
    plt.suptitle("Визуализация предсказаний CNN")
    plt.show()

# --- Запуск задач ---
if __name__ == "__main__":
    print("--- Задание 1: Обработка данных Iris ---")
    iris_data_processing()

    print("\n--- Задание 2: Классификация цифр MLPClassifier ---")
    mlp_digits_classification()

    print("\n--- Задание 3: Распознавание рукописных цифр CNN на MNIST ---")
    cnn_mnist()
